<?php

// Inclui o autoloader do Composer para carregar as bibliotecas
require_once __DIR__ . '/vendor/autoload.php';

// Importa a classe FPDI
use setasign\Fpdi\Tcpdf\Fpdi;

// --- FUN√á√ÉO DE ASSINATURA BASEADA NO C√ìDIGO FUNCIONAL DO USU√ÅRIO ---
function signPdf($pdfInputPath, $pdfOutputPath, $pfxPath, $password) {
    try {
        echo "üöÄ Iniciando assinatura digital...\n";
        echo "üìÑ Arquivo de entrada: $pdfInputPath\n";
        echo "üìÅ Arquivo de sa√≠da: $pdfOutputPath\n";
        echo "üîë Certificado: $pfxPath\n\n";
        
        // Verifica se os arquivos existem
        if (!file_exists($pdfInputPath)) {
            throw new \Exception("Arquivo PDF de entrada n√£o encontrado: $pdfInputPath");
        }
        
        if (!file_exists($pfxPath)) {
            throw new \Exception("Arquivo de certificado n√£o encontrado: $pfxPath");
        }
        
        // Cria uma nova inst√¢ncia do FPDI (exatamente como no c√≥digo funcional)
        $pdf = new Fpdi();
        $pdf->setPrintHeader(false);
        $pdf->setPrintFooter(false);
        
        echo "üìñ Importando p√°ginas do PDF original...\n";
        
        // Importa o PDF original preservando layout exato
        $pageCount = $pdf->setSourceFile($pdfInputPath);
        echo "üìÑ Total de p√°ginas: $pageCount\n";
        
        for ($i = 1; $i <= $pageCount; $i++) {
            $tplId = $pdf->importPage($i);
            $size = $pdf->getTemplateSize($tplId);
            
            // Adiciona uma nova p√°gina com as dimens√µes exatas da p√°gina original
            if ($size['width'] > $size['height']) {
                $pdf->AddPage('L', [$size['width'], $size['height']]);
            } else {
                $pdf->AddPage('P', [$size['width'], $size['height']]);
            }
            
            // Usa o template e o posiciona para cobrir toda a p√°gina
            $pdf->useTemplate($tplId, 0, 0, $size['width'], $size['height']);
            
            echo "‚úÖ P√°gina $i/$pageCount processada ({$size['width']}x{$size['height']})\n";
        }

        echo "üîê Preparando assinatura digital...\n";
        
        // --- Adiciona a assinatura digital (c√≥digo exato do usu√°rio) ---
        $pfxContent = file_get_contents($pfxPath);

        // L√™ o certificado e a chave privada do arquivo PFX
        if (openssl_pkcs12_read($pfxContent, $certs, $password)) {
            $certificate = $certs['cert'];
            $privateKey = $certs['pkey'];
            echo "‚úÖ Certificado PFX lido com sucesso\n";
        } else {
            throw new \Exception('Erro ao ler o certificado PFX. Senha incorreta ou arquivo inv√°lido.');
        }

        // Configura a assinatura (igual ao c√≥digo funcional)
        $pdf->setSignature($certificate, $privateKey, $password, '', 2, 'Assinatura Digital');
        
        // Define a posi√ß√£o da assinatura
        $pdf->setSignatureAppearance(50, 50, 100, 20);
        
        echo "üíæ Salvando documento assinado...\n";

        // Salva o PDF assinado (usar caminho absoluto para evitar problemas)
        $absoluteOutputPath = realpath(dirname($pdfOutputPath)) . '/' . basename($pdfOutputPath);
        $pdf->Output($absoluteOutputPath, 'F');
        
        // Verifica se o arquivo foi criado com sucesso
        if (file_exists($pdfOutputPath)) {
            $fileSize = filesize($pdfOutputPath);
            echo "üéâ SUCESSO! Documento assinado salvo: $pdfOutputPath ($fileSize bytes)\n";
            return ['success' => true, 'message' => 'Documento assinado com sucesso'];
        } else {
            throw new \Exception('Arquivo assinado n√£o foi criado');
        }

    } catch (\Exception $e) {
        $errorMsg = 'Erro durante a assinatura: ' . $e->getMessage();
        echo "‚ùå $errorMsg\n";
        return ['success' => false, 'error' => $errorMsg];
    }
}

// Verifica se foi chamado via linha de comando com argumentos
if ($argc >= 5) {
    $pdfInputPath = $argv[1];
    $pdfOutputPath = $argv[2]; 
    $pfxPath = $argv[3];
    $password = $argv[4];
    
    echo "üîß Par√¢metros recebidos:\n";
    echo "- PDF Entrada: $pdfInputPath\n";
    echo "- PDF Sa√≠da: $pdfOutputPath\n";
    echo "- Certificado: $pfxPath\n";
    echo "- Senha: [PROTEGIDA]\n\n";
    
    $result = signPdf($pdfInputPath, $pdfOutputPath, $pfxPath, $password);
    
    // Retorna resultado em JSON para o Node.js
    echo "RESULT_JSON:" . json_encode($result) . "\n";
} else {
    echo "‚ùå Uso: php sign_pdf_working.php <pdf_input> <pdf_output> <pfx_path> <password>\n";
    exit(1);
}